<?xml version='1.0'?>

<!-- 
  From: 
      http://www.theconstructsim.com/how-to-build-a-differential-drive-simulation/ 
-->

<sdf version='1.6'>
  <model name="my_ROS_mobile_robot">
  	<!--If static=true, will be ignored by the physics engine so I can place the components
     properly-->
  	<static>false</static>

  	<link name='chassis'>
  		<pose>0.03096 0.007609 0.014522 0 0 -0.02816</pose>

<!--
  The <inertial> tag specifies the inertial parameters of the chassis, those are, how the mass is distributed along the surface of the chassis.

  Computing the inertial parameters [using MeshLab]:
    - Install and open MeshLab
    - View → Show Layer Dialog (the result shown up here)
    - Filters → Quality Measure and Computations → Compute Geometric Measures

  http://gazebosim.org/tutorials?tut=inertia
-->

      <inertial>
        <!-- mass= 500gr -->
        <mass>0.5</mass>
        <pose>0 0 0 0 0 0</pose>
        <inertia>
          <ixx>0.16667</ixx>
          <iyy>0.16667</iyy>
          <izz>0.16667</izz>
        </inertia>
      </inertial>

      <gravity>1</gravity>
      <self_collide>0</self_collide>
      <kinematic>1</kinematic>

<!--
  The <collision> tag describes the physical shape of the chassis. This description is used to calculate collisions with other objects in the world.
-->

  		<collision name='collision'>
  			<geometry>
  				<box>
  					<size>0.175 0.11 0.08</size>
  				</box>
  			</geometry>
  		</collision>

<!--
  The <visual> tag describes the visual aspect of the chassis. This is, how the chassis is going to be seen in the simulator. For this simple robot, <collision> and <visual> are exactly the same (a box), but this is not mandatory. Actually, it is very common that the visual aspect is more detailed than the collision model, because it is less expensive to compute the visual than the collisions.
-->

  		<visual name='visual'>
        <pose frame=''>0 0 0.037 0 0 0</pose>
  			<geometry>
	          <mesh>
	            <uri>file://$(find robot_description)/meshes/chassis_resized.stl</uri>
	          </mesh>
  			</geometry>
  		</visual>

<!--
  A caster wheel is necessary in order to provide stability to the robot. Otherwise, it will fall forward towards the floor.

  We can simulate the caster wheel as a sphere attached to the chassis that has very low friction values. That sphere will not rotate in the simulation as it would do it in real life, but the behavior is close enough to a real caster.

  Because we want it as part of the chassis structure, we must include the <collision> and <visual> tags of the caster inside the chassis link definition.
-->

      <!--collision name='caster_collision'>
        <pose>-0.15 0 -0.05 0 0 0</pose>
        
        <geometry>
          <sphere>
            <radius>0.05</radius>
          </sphere>
        </geometry>

        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>

      </collision>

      <visual name='caster_visual'>
        <pose>-0.15 0 -0.05 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>.05</radius>
          </sphere>
        </geometry>
      </visual-->

  	</link>

<!-- END OF CHASSIS LINK DEFINITION -->

<!--
  We are going to add two wheels, to left and right sides of the chassis. We model the wheels as cylinders of radius 0.1 m. Again, you can see the <collision> and <visual> tags to describe the wheels. An additional tag of <pose> indicates the position of the wheels related to the center of the robot (side to side of the chassis).
-->

    <link name="left_wheel">
      <pose>0.013815 0.050215 0.033062 0 0 -0.02816</pose>

      <inertial>
        <mass>0.01</mass>
        <inertia>
          <ixx>0.166667</ixx>
          <iyy>0.166667</iyy>
          <izz>0.166667</izz>
        </inertia>
        <pose frame=''>0 0 0 0 -0 0</pose>
      </inertial>

      <gravity>1</gravity>
      <self_collide>0</self_collide>
      <kinematic>1</kinematic>
      
      <collision name="collision">
      	<pose frame=''>0 0 0 1.57 0 0</pose>
        <geometry>
        	<cylinder>
	            <radius>0.037</radius>
	            <length>0.026</length>
        	</cylinder>
        </geometry>
      </collision>

      <visual name="visual">
        <geometry>
          <mesh>
            <uri>file://$(find robot_description)/meshes/left_wheel_resized.stl</uri>
          </mesh>
        </geometry>
      </visual>

    </link>

    <link name="right_wheel">
      <pose>0.013815 -0.050215 0.033062 0 0 -0.02816</pose>

      <inertial>
        <mass>0.01</mass>
        <inertia>
          <ixx>0.166667</ixx>
          <iyy>0.166667</iyy>
          <izz>0.166667</izz>
        </inertia>
        <pose frame=''>0 0 0 0 -0 0</pose>
      </inertial>

      <gravity>1</gravity>
      <self_collide>0</self_collide>
      <kinematic>1</kinematic>
      
      <collision name="collision">
        <pose frame=''>0 0 0 1.57 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.037</radius>
            <length>0.026</length>
          </cylinder>
        </geometry>
      </collision>

      <visual name="visual">
        <geometry>
          <mesh>
            <uri>file://$(find robot_description)/meshes/right_wheel_resized.stl</uri>
          </mesh>
        </geometry>
      </visual>

    </link>

<!--
  Additionally to the <visual> and <collision> tags, in order to indicate that those parts must rotate, we have to specify that THE UNION BETWEEN THE WHEEL AND THE CHASSIS IS MADE BY THE JOINT, and that this joint can rotate. For this purpose, add now the following code that describes the two required joints and the union between chassis and wheels.
-->

    <joint type="revolute" name="left_wheel_hinge">
      <pose>0 0 0 0 0 0</pose>
      <child>left_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

    <joint type="revolute" name="right_wheel_hinge">
      <pose>0 0 0 0 0 0</pose>
      <child>right_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

<!--
  The robot needs to integrate some code that allows the robot movement and control from ROS programs. This is only possible by using PLUGINS: 

  http://gazebosim.org/tutorials?cat=write_plugin

  Here it's used an already made plugin to drive the robot (libgazebo_ros_diff_drive.so). This is a plugin included in the installation of ROS packages for Gazebo.
-->
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>left_wheel_hinge</leftJoint>
      <rightJoint>right_wheel_hinge</rightJoint>
      <wheelSeparation>0.1415</wheelSeparation>
      <wheelDiameter>0.062</wheelDiameter>
      <torque>1</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>

      <legacyMode>false</legacyMode>
      <rosDebugLevel>na</rosDebugLevel>
      <publishWheelTF>true</publishWheelTF>
      <publishWheelJointState>true</publishWheelJointState>
      <wheelAcceleration>0</wheelAcceleration>
      <!-- 800 gm*cm = 0.008 kg*m -->
      <wheelTorque>0.008</wheelTorque>
      <odometrySource>1</odometrySource>
      <publishTf>1</publishTf>
      <robotNamespace>/</robotNamespace>
    </plugin>

  </model>
</sdf>