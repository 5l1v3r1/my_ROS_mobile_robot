<launch>

<!--
	if you do a “rostopic list” you should see the topics corresponding to your controllers. You can send commands manually to your robot:

  		rostopic pub -1 /my_robot/leftWheel_effort_controller/command std_msgs/Float64 "data: 1.5"
  
  		rostopic pub -1 /my_robot/rightWheel_effort_controller/command std_msgs/Float64 "data: 1.0"

	The robot should start moving.

	You can also monitor the joint states by doing :

	rostopic echo /my_robot/joint_states
-->



	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="gui" default="true"/>
	<arg name="headless" default="false"/>
	<arg name="debug" default="false"/>

	<!-- urdf xml robot description loaded on the Parameter Server, converting the xacro into a proper urdf file-->
	<param name="robot_description"
		   command="$(find xacro)/xacro --inorder '$(find my_robot_description)/urdf/my_robot.xacro'" />

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find my_robot_gazebo)/worlds/my_robot.world"/>
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)"/>
		<arg name="use_sim_time" value="$(arg use_sim_time)"/>
		<arg name="headless" value="$(arg headless)"/>
	</include>

	<!-- push robot_description to factory and spawn robot in gazebo -->
	<node name="urdf_spawner" 
		  pkg="gazebo_ros" 
		  type="spawn_model" 
		  output="screen"
 		  args="-urdf -model my_robot -param robot_description" />

 	<!-- ros_control mybot launch file -->
	<include file="$(find my_robot_control)/launch/my_robot_control.launch" />

</launch>